; Scans a folder looking for 3d scenes, and draw multiple copies of them; It will fraw first the first scene N times, then the second scene N times, and so on...; Reference folder (it will be scanned searching for 3d scenes)sModelFolderPath /pool/models/cube/; Scene format (obj, 3ds, etc...)sSceneFormat objsShaderPath /pool/models/cube/basic.glsl; Number of copies to render per scenefCopiesPerScene 5fEnableDepthBufferClearing 0fDisableDepthTest 0fEnableDrawWireframe 0; Update formulas on each frame?fUpdateFormulasOnEachFrame 1; Animation support for objects, bones and camerasfEnableAnimation 0fAnimationNumber 0; Define Animation time (normally 't')string aTime:=0;; GLOBAL MATRIX OBJECT POSITIONING (affects all objects); Translation for matrix objectstring m_tx:=0; m_ty:=0; m_tz:=0;; Rotation for matrix objectstring m_rx:=90; m_ry:=0; m_rz:=0;; Scale for matrix objectstring m_sx:=1; m_sy:=1; m_sz:=1;; INDIVIDUAL OBJECT POSITIONING; n -> current object being drawn (float value); n_total -> Total number of objects to draw (float value); x/y/z -> Initial position of the object (3 floats); r/a/b -> Initial position of the object in polar (3 floats: radius/alpha(radians)/beta(radians)); Translation for object nstring tx:=1+3*n; ty:=0; tz:=1*sin(t*n);; Rotation for object nstring rx:=90*sin(t)*(n+1); ry:=0; rz:=0;; Scale for object nstring sx:=1; sy:=1; sz:=1;; **********************; ** SHADER VARIABLES **; **********************; Values automatically sent to the shader:; n -> current object being drawn (float value); n_total -> Total number of objects to draw (float value); n_pos -> Initial position of the object (vec3 value); n_polar -> Initial position of the object in polar cooridnates (vec3: x:alpha(radians) / y:beta(radians) / z: radius); projection / view / model : matrixes; prev_projection / prev_view / prev_model : frame -1 previous matrixes (useful for motion blur shaders)
; Draws a 3D scene on each vertex of a reference 3d scene; Reference Scene (it will be used to capture the 3d vertex)sMatrixModelFilePath /pool/models/cube/cube.obj; Scene to draw on each vertexsModelFilePath /pool/models/cube/cube.objsShaderPath /pool/models/cube/basic.glslfEnableDepthBufferClearing 0fEnableDrawWireframe 0; Update formulas on each frame?fUpdateFormulasOnEachFrame 0; Animation support for objects, bones and camerasfEnableAnimation 0fAnimationNumber 0; Define Animation timestring aTime:=0;; GLOBAL MATRIX OBJECT POSITIONING (affects all objects); Translation for matrix objectstring m_tx:=0; m_ty:=0; m_tz:=0;; Rotation for matrix objectstring m_rx:=0; m_ry:=0; m_rz:=0;; Scale for matrix objectstring m_sx:=1; m_sy:=1; m_sz:=1;; INDIVIDUAL OBJECT POSITIONING; n -> current object being drawn (float value); n_total -> Total number of objects to draw (float value); x/y/z -> Initial position of the object (3 floats); r/a/b -> Initial position of the object in polar (3 floats: radius/alpha(radians)/beta(radians)); Translation for object nstring tx:=0; ty:=0; tz:=0;; Rotation for object nstring rx:=0; ry:=180*sin(t*n); rz:=0;; Scale for object nstring sx:=0.5; sy:=0.5; sz:=0.5;; SHADER VARIABLES; Values automatically sent to the shader:; n -> current object being drawn (float value); n_total -> Total number of objects to draw (float value); n_pos -> Initial position of the object (vec3 value); n_polar -> Initial position of the object in polar cooridnates (vec3: x:alpha(radians) / y:beta(radians) / z: radius); projection / view / model : matrixes; prev_projection / prev_view / prev_model : frame -1 previous matrixes (useful for motion blur shaders)